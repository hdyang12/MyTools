<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间,作用就是对sql进行分类化管理,理解sql隔离
注意:使用mapper代理方法开发,namespace有特殊重要的作用 -->
<mapper namespace="test">
	<!-- 在映射文件中配置很多sql语句 -->
	<!-- 通过select执行数据库查询id:标识映射文件中的sql将sql
	语句封装到mappedStatement对象中,所以将id称为statement的id
	#{}标识一个占位符号
	#{id}:其中的id表示接入输入的参数,参数名称就是id,如果输入的参数是简单类型,
	#{}中的参数名可以任意,可以是value或其他名称
	resultType:指定sql输出结果所映射的java对象类型,select指定resultType表示
	将单条记录映射成的java对象 -->
	<select id="findUserById" parameterType="int" resultType="yh.model.User">
	select * from user where id = #{id}
	</select>
	<!-- 根据用户名称模糊查询用户信息,可能返回多条
	resultType:指定的就是单条记录所映射的java对象类型
	${}:表示拼接sql串,将接受到参数的内容不加任何修饰拼接在sql中
	使用${}拼接sql,引起sql注入
	${value}:接受输入参数的内容,如果转入类型是简单类型, ${]中只能使用value-->
	<select id="findUserByName" parameterType="java.lang.String" resultType="yh.model.User">
		select * from user where username like '%${value}%'
	</select>
	<!-- 添加用户
	parameterType:指定输入参数类型是pojo(包括用户信息)
	#{}中指定pojo的属性名,接收到pojo对象的属性值,mybatis通过OGNL获取对象的属性值,
	通过属性.属性.属性...的方式获取对象属性值
	这里的id属性可以不用写,因为完全是自增的 -->
	<insert id="insertUser" parameterType="yh.model.User">
	<!-- 将插入数据的主键返回,返回到user对象中 
	select last_insert_id():得到刚insert进去记录的主键值,只适用于自增主键
	keyProperty:将查询到主键值设置到parameterType指定的对象的那个属性
	order:select last_insert_id()执行顺序,相对于insert语句来说它的执行顺序
	resultType:指定结果的类型-->
	<selectKey keyProperty="id" resultType="int" order="AFTER">
		select last_insert_id()
	</selectKey>
	<!-- 使用mysql的uuid()生成主键
	执行过程:
	首先通过uuid()得到主键,将主键设置到user对象的id属性中
	其次在insert执行时,从user对象中取出id属性值 -->
	<!-- <selectKey keyProperty="id" order="before" resultType="java.lang.Sting">
		select uuid()
	</selectKey>   -->
		insert into user (id,username,birthday,sex,address)value(#{id},#{username},#{birthday},#{sex},#{address})
	</insert>
	<!-- 删除用户 -->
	<delete id="deleteUser" parameterType="int">
		delete from user where id=#{id}
	</delete>
	
	<!-- 更新用户
	分析:
	需要传入用户的id
	需要传入用户的更新信息 
	parameterType指定user对象,包括id和更新信息,注意:id必须存在
	#{id}:从输入user对象中获取id属性值-->
	<update id="updateUser" parameterType="yh.model.User">
		update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id = #{id}
	</update>
</mapper>
