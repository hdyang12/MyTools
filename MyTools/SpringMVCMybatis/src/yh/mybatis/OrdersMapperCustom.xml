<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间,作用就是对sql进行分类化管理,理解sql隔离
注意:使用mapper代理方法开发,namespace有特殊重要的作用 -->
<mapper namespace="yh.dao.OrdersMapperCustom">
<!-- 查询订单关联查询用户信息 -->
	<select id="findOrdersUser" resultType="yh.model.OrdersCustom">
		select orders.*,user.username,user.sex,user.address from orders,user where orders.user_id=user.id 
	</select>
	<!-- 订单查询关联用户的resultMap 
	将整个查询的结果映射到yh.model.Orders中-->
	<resultMap type="yh.model.Orders" id="OrderUserResultMap">
	<!-- 配置映射的订单信息 -->
	<!-- id:指定查询列中的唯一标识,订单信息中的唯一标识
	如果由多个列组成唯一标识，配置多个id -->
	<id column="id" property="id"></id>
	<result column="user_id" property="userId"></result>
	<result column="unumber" property="number"></result>
	<result column="createtime" property="createtime"></result>
	<result column="note" property="note"></result>
	<!-- 配置映射的关联的用户信息 -->
	<!-- association：用于映射关联查询单个对象的信息
	property：要将关联查询的用户信息映射到Orders中哪个属性 -->
	<association property="user" javaType="yh.model.User">
		<!-- id:关联查询用户的唯一标识
		column：指定唯一标识用户信息的列
		JavaType：映射到user的哪个属性 -->
		<id column="user_id" property="id"></id>
		<result column="username" property="username"></result>
		<result column="sex" property="sex"></result>
		<result column="address" property="address"></result>
	</association>
	</resultMap>
	<select id="findOrdersUserResultMap" resultMap="OrderUserResultMap">
		select orders.*,user.username,user.sex,user.address from orders,user where orders.user_id=user.id 
	</select>
	<!-- 查询订单及订单明细的resultMap -->
	<!-- 使用extends继承，不用在配置订单信息和用户信息的映射 -->
	<resultMap type="yh.model.Orders" id="OrdersAndOrderDetailResultMap" extends="OrderUserResultMap">
		
		<!-- 订单明细信息
		一个订单关联查询出了多条明细要使用collection进行映射
		collection：对关联查询到多条记录映射到集合对象中
		property:要将关联查询到多条记录映射到yh.model.Orders哪个属性
		ofType:指定映射到list集合属性中pojo的类型 -->
		<collection property="orderdetails" ofType="yh.model.OrderDetail">
			<!-- id:订单明细唯一标识
			property:要将订单明细唯一标识映射到yh.model.Orderdetail的哪个属性 -->
			<id column="orderdetail_id" property="id"/>
			<result column="items_id" property="itemsId"></result>
			<result column="items_num" property="itemsNum"></result>
			<result column="orders_id" property="ordersId"></result>
		</collection>
	</resultMap>
	<select id="findOrdersAndOrderDetailResultMap" resultMap="OrdersAndOrderDetailResultMap">
		select orders.*,user.username,user.sex,user.address,orderdetail.items_id,orderdetail.items_num,orderdetail.orders_id
 		from orders,user,orderdetail where orders.user_id = user.id
		and orderdetail.orders_id=orders.id
	</select>
	
	<!-- 查询用户及购买的商品 -->
	<resultMap type="yh.model.User" id="UserAndItemsResultMap">
	<!-- 用户信息 -->
	<id column="user_id" property="id"></id>
	<result column="username" property="username"/>
	<result column="sex" property="sex"/>
	<result column="address" property="address"/>
	<!-- 订单信息
	一个用户对应多个订单，使用collection映射 -->
	<collection property="ordersList" ofType="yh.model.Orders">
		<id column="id" property="id"></id>
		<result column="user_id" property="userId"></result>
		<result column="unumber" property="number"></result>
		<result column="createtime" property="createtime"></result>
		<result column="note" property="note"></result>
	<!-- 订单明细 
	一个订单包括多个明细-->
		<collection column="orderdetails" property="yh.model.OrderDetail">
			<id column="orderdetail_id" property="id"/>
			<result column="items_id" property="itemsId"></result>
			<result column="items_num" property="itemsNum"></result>
			<result column="orders_id" property="ordersId"></result>
			<!-- 商品信息
			一个订单明细对应一个商品 -->
			<association property="items" javaType="yh.model.Items">
				<id column="items_id" property="id"></id>
				<result column="items_name" property="name"></result>
				<result column="items_detail" property="detail"></result>
				<result column="items_price" property="price"></result>
			</association>
		</collection>
	</collection>
	</resultMap>
	<!-- 查询用户及购买的商品信息，使用resultMap -->
	<select id="findUserAndItemsResultMap" resultMap="UserAndItemsResultMap">
		select orders.*,user.username,user.sex,user.address,orderdetail.items_id,orderdetail.items_num,
orderdetail.orders_id,orderdetail.id orderdetail_id,items.name items_name,items.detail items_detail,items.price items_price
 from orders,user,orderdetail,items where orders.user_id = user.id
and orderdetail.orders_id=orders.id and orderdetail.items_id = items.id
	</select>
	<!-- 延迟加载的resultMap -->
	<resultMap type="yh.model.Orders" id="OrdersUserLazyLoadingResultMap">
		<!-- 对订单信息进行映射配置 -->
		<id column="id" property="id"></id>
		<result column="user_id" property="userId"></result>
		<result column="unumber" property="number"></result>
		<result column="createtime" property="createtime"></result>
		<result column="note" property="note"></result>
		<!-- 实现对用户信息进行延迟加载
		select:指定延迟加载需要执行的statement的id（是根据user_id查询用户信息的statement）
		要使用userMapper.xml中findUserById完成根据用户id(user_id)用户信息的查询如果finduserById不在本mapper中需要前边加namespace
		column：订单信息中关联用户信息查询的列，是user_id
		关联查询的sql理解为：
		select orders.*,
		(select username from user where orders.user_id = user.id)username,
		(select sex from user where orders.user_id = user.id)sex
		from orders -->
		<association property="user" javaType="yh.model.User" select="yh.dao.UserMapper.findUserById" column="id">

		</association>
	</resultMap>
	<!-- 查询订单关联查询用户，用户信息需要延迟加载 -->
	<select id="findOrdersUserLazyLoading" resultMap="OrdersUserLazyLoadingResultMap">
		select * from orders
	</select>
</mapper>